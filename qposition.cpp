#include "qposition.h"

#define FILE_A 0
#define FILE_B 1
#define FILE_C 2
#define FILE_D 3
#define FILE_E 4
#define FILE_F 5
#define FILE_G 6
#define FILE_H 7

#define RANK_1 0
#define RANK_2 1
#define RANK_3 2
#define RANK_4 3
#define RANK_5 4
#define RANK_6 5
#define RANK_7 6
#define RANK_8 7

const U64 WhitePawns   = 0b0000000000000000000000000000000000000000000000001111111100000000;
const U64 WhiteRooks   = 0b0000000000000000000000000000000000000000000000000000000010000001;
const U64 WhiteKnights = 0b0000000000000000000000000000000000000000000000000000000001000010;
const U64 WhiteBishops = 0b0000000000000000000000000000000000000000000000000000000000100100;
const U64 WhiteQueens  = 0b0000000000000000000000000000000000000000000000000000000000001000;
const U64 WhiteKing    = 0b0000000000000000000000000000000000000000000000000000000000010000;

const U64 BlackPawns   = 0b0000000011111111000000000000000000000000000000000000000000000000;
const U64 BlackRooks   = 0b1000000100000000000000000000000000000000000000000000000000000000;
const U64 BlackKnights = 0b0100001000000000000000000000000000000000000000000000000000000000;
const U64 BlackBishops = 0b0010010000000000000000000000000000000000000000000000000000000000;
const U64 BlackQueens  = 0b0000100000000000000000000000000000000000000000000000000000000000;
const U64 BlackKing    = 0b0001000000000000000000000000000000000000000000000000000000000000;


const U64 MaskRank[8]  ={0x00000000000000FF,
                         0x000000000000FF00,
                         0x0000000000FF0000,
                         0x00000000FF000000,
                         0x000000FF00000000,
                         0x0000FF0000000000,
                         0x00FF000000000000,
                         0xFF00000000000000};

const U64 ClearRank[8] ={0b1111111111111111111111111111111111111111111111111111111100000000,
                         0b1111111111111111111111111111111111111111111111110000000011111111,
                         0b1111111111111111111111111111111111111111000000001111111111111111,
                         0b1111111111111111111111111111111100000000111111111111111111111111,
                         0b1111111111111111111111110000000011111111111111111111111111111111,
                         0b1111111111111111000000001111111111111111111111111111111111111111,
                         0b1111111100000000111111111111111111111111111111111111111111111111,
                         0b0000000011111111111111111111111111111111111111111111111111111111};

const U64 MaskFile[8]  ={0b1000000010000000100000001000000010000000100000001000000010000000,
                         0b0100000001000000010000000100000001000000010000000100000001000000,
                         0b0010000000100000001000000010000000100000001000000010000000100000,
                         0b0001000000010000000100000001000000010000000100000001000000010000,
                         0b0000100000001000000010000000100000001000000010000000100000001000,
                         0b0000010000000100000001000000010000000100000001000000010000000100,
                         0b0000001000000010000000100000001000000010000000100000001000000010,
                         0b0000000100000001000000010000000100000001000000010000000100000001};

const U64 ClearFile[8] ={0b0111111101111111011111110111111101111111011111110111111101111111,
                         0b1011111110111111101111111011111110111111101111111011111110111111,
                         0b1101111111011111110111111101111111011111110111111101111111011111,
                         0b1110111111101111111011111110111111101111111011111110111111101111,
                         0b1111011111110111111101111111011111110111111101111111011111110111,
                         0b1111101111111011111110111111101111111011111110111111101111111011,
                         0b1111110111111101111111011111110111111101111111011111110111111101,
                         0b1111111011111110111111101111111011111110111111101111111011111110};

const U64 Piece[64] = { 0b000000000000000000000000000000000000000000000000000000000000001,
                  0b000000000000000000000000000000000000000000000000000000000000010,
                  0b000000000000000000000000000000000000000000000000000000000000100,
                  0b000000000000000000000000000000000000000000000000000000000001000,
                  0b000000000000000000000000000000000000000000000000000000000010000,
                  0b000000000000000000000000000000000000000000000000000000000100000,
                  0b000000000000000000000000000000000000000000000000000000001000000,
                  0b000000000000000000000000000000000000000000000000000000010000000,
                  0b000000000000000000000000000000000000000000000000000000100000000,
                  0b000000000000000000000000000000000000000000000000000001000000000,
                  0b000000000000000000000000000000000000000000000000000010000000000,
                  0b000000000000000000000000000000000000000000000000000100000000000,
                  0b000000000000000000000000000000000000000000000000001000000000000,
                  0b000000000000000000000000000000000000000000000000010000000000000,
                  0b000000000000000000000000000000000000000000000000100000000000000,
                  0b000000000000000000000000000000000000000000000001000000000000000,
                  0b000000000000000000000000000000000000000000000010000000000000000,
                  0b000000000000000000000000000000000000000000000100000000000000000,
                  0b000000000000000000000000000000000000000000001000000000000000000,
                  0b000000000000000000000000000000000000000000010000000000000000000,
                  0b000000000000000000000000000000000000000000100000000000000000000,
                  0b000000000000000000000000000000000000000001000000000000000000000,
                  0b000000000000000000000000000000000000000010000000000000000000000,
                  0b000000000000000000000000000000000000000100000000000000000000000,
                  0b000000000000000000000000000000000000001000000000000000000000000,
                  0b000000000000000000000000000000000000010000000000000000000000000,
                  0b000000000000000000000000000000000000100000000000000000000000000,
                  0b000000000000000000000000000000000001000000000000000000000000000,
                  0b000000000000000000000000000000000010000000000000000000000000000,
                  0b000000000000000000000000000000000100000000000000000000000000000,
                  0b000000000000000000000000000000001000000000000000000000000000000,
                  0b000000000000000000000000000000010000000000000000000000000000000,
                  0b000000000000000000000000000000100000000000000000000000000000000,
                  0b000000000000000000000000000001000000000000000000000000000000000,
                  0b000000000000000000000000000010000000000000000000000000000000000,
                  0b000000000000000000000000000100000000000000000000000000000000000,
                  0b000000000000000000000000001000000000000000000000000000000000000,
                  0b000000000000000000000000010000000000000000000000000000000000000,
                  0b000000000000000000000000100000000000000000000000000000000000000,
                  0b000000000000000000000001000000000000000000000000000000000000000,
                  0b000000000000000000000010000000000000000000000000000000000000000,
                  0b000000000000000000000100000000000000000000000000000000000000000,
                  0b000000000000000000001000000000000000000000000000000000000000000,
                  0b000000000000000000010000000000000000000000000000000000000000000,
                  0b000000000000000000100000000000000000000000000000000000000000000,
                  0b000000000000000001000000000000000000000000000000000000000000000,
                  0b000000000000000010000000000000000000000000000000000000000000000,
                  0b000000000000000100000000000000000000000000000000000000000000000,
                  0b000000000000001000000000000000000000000000000000000000000000000,
                  0b000000000000010000000000000000000000000000000000000000000000000,
                  0b000000000000100000000000000000000000000000000000000000000000000,
                  0b000000000001000000000000000000000000000000000000000000000000000,
                  0b000000000010000000000000000000000000000000000000000000000000000,
                  0b000000000100000000000000000000000000000000000000000000000000000,
                  0b000000001000000000000000000000000000000000000000000000000000000,
                  0b000000010000000000000000000000000000000000000000000000000000000,
                  0b000000100000000000000000000000000000000000000000000000000000000,
                  0b000001000000000000000000000000000000000000000000000000000000000,
                  0b000010000000000000000000000000000000000000000000000000000000000,
                  0b000100000000000000000000000000000000000000000000000000000000000,
                  0b001000000000000000000000000000000000000000000000000000000000000,
                  0b010000000000000000000000000000000000000000000000000000000000000,
                  0b100000000000000000000000000000000000000000000000000000000000000};

inline U64 soutOne(const U64& x) {return x >> 8;}
inline U64 nortOne(const U64& x) {return x << 8;}
inline U64 eastOne(const U64& x) {return (x << 1) & ClearFile[FILE_A];}
inline U64 noEaOne(const U64& x) {return (x << 9) & ClearFile[FILE_A];}
inline U64 soEaOne(const U64& x) {return (x >> 7) & ClearFile[FILE_A];}
inline U64 westOne(const U64& x) {return (x >> 1) & ClearFile[FILE_H];}
inline U64 soWeOne(const U64& x) {return (x >> 9) & ClearFile[FILE_H];}
inline U64 noWeOne(const U64& x) {return (x << 7) & ClearFile[FILE_H];}
inline U64 rotateLeft(const U64& x, const int s)  {return (x << s) | (x >> (64-s));}
inline U64 rotateRight(const U64& x, const int s) {return (x >> s) | (x << (64-s));}

QPosition::QPosition(void){
  bpowns   = QBitBoard(0);
  bknights = QBitBoard(0);
  bbishops = QBitBoard(0);
  brocks   = QBitBoard(0);
  bquins   = QBitBoard(0);
  bking    = QBitBoard(0);

  wpowns   = QBitBoard(0);
  wknights = QBitBoard(0);
  wbishops = QBitBoard(0);
  wrocks   = QBitBoard(0);
  wquins   = QBitBoard(0);
  wking    = QBitBoard(0);

  boccupancy = QBitBoard(0);
  woccupancy = QBitBoard(0);
  occupancy  = QBitBoard(0);
}

void QPosition::PrintLookUpTables(void) const{
  cout << "WhitePawns: " << WhitePawns << endl;
  return;
}

void QPosition::SetBOcc(void){
  boccupancy = bpowns | bknights | bbishops | brocks | bquins | bking;
}

void QPosition::SetWOcc(void){
  woccupancy = wpowns | wknights | wbishops | wrocks | wquins | wking;
}

void QPosition::SetOcc(void){
  SetWOcc();
  SetBOcc();
  occupancy = woccupancy | boccupancy;
}

QBitBoard QPosition::KingMovement(const U64& l, const U64& own_side){
  const U64 legal_moves = (soutOne(l) | nortOne(l) | eastOne(l) | noEaOne(l) | soEaOne(l) | westOne(l) | soWeOne(l) | noWeOne(l)) & ~own_side;
  return QBitBoard(legal_moves);
}

QBitBoard QPosition::KnightMovement(const U64& location, const U64& own_side){
  const U64 clearAB = ClearFile[FILE_A] & ClearFile[FILE_B];
  const U64 clearGH = ClearFile[FILE_G] & ClearFile[FILE_H];

  const U64 spot1 = (location & clearAB)           << 6;
  const U64 spot2 = (location & ClearFile[FILE_A]) << 15;
  const U64 spot3 = (location & ClearFile[FILE_H]) << 17;
  const U64 spot4 = (location & clearGH)           << 10;

  const U64 spot5 = (location & clearGH)           >> 6;
  const U64 spot6 = (location & ClearFile[FILE_H]) >> 15;
  const U64 spot7 = (location & ClearFile[FILE_A]) >> 17;
  const U64 spot8 = (location & clearAB)           >> 10;

  const U64 moves = spot1 | spot2 | spot3 | spot4 | spot5 | spot6 | spot7 | spot8;
  return QBitBoard(moves & ~own_side);
}

QBitBoard QPosition::WhitePawnMovement(const U64& location){
  // check the single space infront of the white pawn
  const U64 one_step = (location << 8 ) & ~occupancy.Bits();
  // for all moves that came from rank 2 (home row) and passed the above filter,
  // thereby being on rank 3, check and see if I can move forward one more
  const U64 two_steps = ((one_step & MaskRank[RANK_3]) << 8) & ~occupancy.Bits();
  // the union of the movements dictate the possible moves forward available
  const U64 valid_steps = one_step | two_steps;
  // next we calculate the pawn attacks
  // check the left side of the pawn, minding the underflow File A
  const U64 left_attack   = (location & ClearFile[FILE_A]) << 7;
  const U64 right_attack  = (location & ClearFile[FILE_H]) << 9;
  const U64 valid_attacks = (left_attack | right_attack) & boccupancy.Bits();

  return QBitBoard(valid_steps | valid_attacks);
}

QBitBoard QPosition::BlackPawnMovement(const U64& location){
  // check the single space infront of the white pawn
  const U64 one_step = (location >> 8 ) & ~occupancy.Bits();
  // for all moves that came from rank 2 (home row) and passed the above filter,
  // thereby being on rank 3, check and see if I can move forward one more
  const U64 two_steps = ((one_step & MaskRank[RANK_6]) >> 8) & ~occupancy.Bits();
  // the union of the movements dictate the possible moves forward available
  const U64 valid_steps = one_step | two_steps;
  // next we calculate the pawn attacks
  // check the left side of the pawn, minding the underflow File A
  const U64 left_attack   = (location & ClearFile[FILE_H]) >> 7;
  const U64 right_attack  = (location & ClearFile[FILE_A]) >> 9;
  const U64 valid_attacks = (left_attack | right_attack) & woccupancy.Bits();

  return QBitBoard(valid_steps | valid_attacks);
}

//int QPosition::MakeMove(const QBitBoard& from,const QBitBoard& to,const int ind){
//    if(turnFlag){// black's move
//        if(!(from.Bits() & boccupancy.Bits())) return -1; // There is no black piece on this square
//        if(to.Bits() & boccupancy.Bits()) return -2; // There is
//    }
//}
